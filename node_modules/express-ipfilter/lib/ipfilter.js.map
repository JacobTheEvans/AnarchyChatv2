{"version":3,"sources":["../src/ipfilter.js"],"names":[],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash'),\niputil = require('ip'),\nNetmask = require('netmask').Netmask;\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `log` console log actions. Defaults to true.\n *  - `errorCode` the HTTP status code to use when denying access. Defaults to 401.\n *  - `errorMessage` the error message to use when denying access. Defaults to 'Unauthorized'.\n *  - `allowPrivateIPs` whether to grant access to any IP using the private IP address space unless explicitly denied. Defaults to false.\n *  - 'cidr' whether ips are ips with a submnet mask.  Defaults to 'false'.\n *  - 'ranges' whether ranges are supplied as ips\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [Array] IP addresses\n * @param {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n    ips = ips || false;\n\n    var logger = function(message){ console.log(message);};\n    var settings = _.defaults( opts || {}, {\n        mode: 'deny',\n        log: true,\n        logF: logger,\n        errorCode: 401,\n        errorMessage: 'Unauthorized',\n        allowPrivateIPs: false,\n        excluding: []\n    });\n\n    var getClientIp = function(req) {\n        var ipAddress;\n\n        var forwardedIpsStr = req.headers['x-forwarded-for'];\n        //Allow getting cloudflare connecting client IP\n        var cloudFlareConnectingIp = req.headers['cf-connecting-ip'];\n        \n        //Allow getting codio connecting client IP\n        var codioConnectingIp=req.headers['x-real-ip'];\n\n        if (forwardedIpsStr) {\n            var forwardedIps = forwardedIpsStr.split(',');\n            ipAddress = forwardedIps[0];\n        }\n\n        if (!ipAddress) {\n            ipAddress = req.connection.remoteAddress;\n        }\n        if(cloudFlareConnectingIp !== undefined){\n            ipAddress=cloudFlareConnectingIp;\n        }\n        if(codioConnectingIp!=undefined){\n            ipAddress=codioConnectingIp;\n        }\n\n        if(!ipAddress){\n            return '';\n        }\n\n        if(ipAddress.indexOf(':') !== -1 && ipAddress.indexOf('::') === -1){\n            ipAddress = ipAddress.split(':')[0];\n        }\n\n        return ipAddress;\n    };\n\n    var matchClientIp = function(ip){\n        var mode = settings.mode.toLowerCase();\n\n        var result = _.invoke(ips,testIp,ip,mode);\n\n        if(mode === 'allow'){\n            return _.some(result);\n        }else{\n            return _.every(result);\n        }\n    };\n\n    var testIp = function(ip,mode){\n        var constraint = this;\n\n        // Check if it is an array or a string\n        if(typeof constraint === 'string'){\n            var cidrRegex = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/;\n            if(cidrRegex.test(constraint)){\n                return testCidrBlock(ip,constraint,mode);\n            }else{\n                return testExplicitIp(ip,constraint,mode);\n            }\n        }\n\n        if(typeof constraint === 'object'){\n            return testRange(ip,constraint,mode);\n        }\n    };\n\n    var testExplicitIp = function(ip,constraint,mode){\n        if(ip === constraint){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    var testCidrBlock = function(ip,constraint,mode){\n        var block = new Netmask(constraint);\n\n        if(block.contains(ip)){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    var testRange = function(ip,constraint,mode){\n        var filteredSet = _.filter(ips,function(constraint){\n            if(constraint.length > 1){\n                var startIp = iputil.toLong(constraint[0]);\n                var endIp = iputil.toLong(constraint[1]);\n                var longIp = iputil.toLong(ip);\n                return  longIp >= startIp && longIp <= endIp;\n            }else{\n                return ip === constraint[0];\n            }\n        });\n\n        if(filteredSet.length > 0){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    return function(req, res, next) {\n        if(settings.excluding.length > 0){\n            var results = _.filter(settings.excluding,function(exclude){\n                var regex = new RegExp(exclude);\n                return regex.test(req.url);\n            });\n\n            if(results.length > 0){\n                if(settings.log){\n                    console.log('Access granted for excluded path: ' + results[0]);\n                }\n                return next();\n            }\n        }\n\n        var ip = getClientIp(req);\n        // If no IPs were specified, skip\n        // this middleware\n        if(!ips || !ips.length) { return next(); }\n\n        if(matchClientIp(ip,req)) {\n            // Grant access\n            if(settings.log) {\n                settings.logF('Access granted to IP address: ' + ip);\n            }\n\n            return next();\n        }\n\n        // Deny access\n        if(settings.log) {\n            settings.logF('Access denied to IP address: ' + ip);\n        }\n\n        res.statusCode = settings.errorCode;\n        return res.end(settings.errorMessage);\n    };\n};\n"]}